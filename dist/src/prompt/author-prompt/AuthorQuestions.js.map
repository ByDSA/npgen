{"version":3,"file":"AuthorQuestions.js","sourceRoot":"","sources":["../../../../src/prompt/author-prompt/AuthorQuestions.ts"],"names":[],"mappings":";;;AAAA,6CAAyC;AAE5B,QAAA,eAAe,GAAG,YAAY,CAAC;AAE/B,QAAA,oBAAoB,GAAG;IAClC,IAAI,EAAE,uBAAe;IACrB,IAAI,EAAE,OAAO;IACb,OAAO,EAAE,cAAc;IACvB,IAAI,EAAE,GAAG,EAAE,CAAC,CAAC,YAAI,EAAE,CAAC,uBAAe,CAAC;IACpC,QAAQ,EAAE,CAAC,KAAa,EAAE,EAAE;QAC1B,IAAI,oBAAoB,CAAC,IAAI,CAAC,KAAK,CAAC;YAClC,OAAO,IAAI,CAAC;QAEd,OAAO,wEAAwE,CAAC;IAClF,CAAC;CACF,CAAC;AAEF,4CAA4C;AAC5C,MAAM,UAAU,GAAG,4aAA4a,CAAC;AAEnb,QAAA,gBAAgB,GAAG,aAAa,CAAC;AAEjC,QAAA,qBAAqB,GAAG;IACnC,IAAI,EAAE,wBAAgB;IACtB,IAAI,EAAE,OAAO;IACb,OAAO,EAAE,eAAe;IACxB,IAAI,EAAE,GAAG,EAAE,CAAC,CAAC,YAAI,EAAE,CAAC,wBAAgB,CAAC;IACrC,QAAQ,EAAE,CAAC,KAAa,EAAE,EAAE;QAC1B,IAAI,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC;YACxB,OAAO,IAAI,CAAC;QAEd,OAAO,wEAAwE,CAAC;IAClF,CAAC;CACF,CAAC;AAEW,QAAA,iBAAiB,GAAG,cAAc,CAAC;AAEnC,QAAA,sBAAsB,GAAG;IACpC,IAAI,EAAE,yBAAiB;IACvB,IAAI,EAAE,OAAO;IACb,OAAO,EAAE,gBAAgB;IACzB,IAAI,EAAE,GAAG,EAAE,CAAC,CAAC,YAAI,EAAE,CAAC,YAAY;IAChC,QAAQ,EAAE,CAAC,KAAa,EAAE,EAAE;QAC1B,IAAI,oBAAoB,CAAC,IAAI,CAAC,KAAK,CAAC;YAClC,OAAO,IAAI,CAAC;QAEd,OAAO,wEAAwE,CAAC;IAClF,CAAC;CACF,CAAC;AAEW,QAAA,gBAAgB,GAAG,aAAa,CAAC;AAEjC,QAAA,qBAAqB,GAAG;IACnC,IAAI,EAAE,wBAAgB;IACtB,IAAI,EAAE,OAAO;IACb,OAAO,EAAE,eAAe;IACxB,IAAI,EAAE,GAAG,EAAE,CAAC,CAAC,YAAI,EAAE,CAAC,wBAAgB,CAAC;IACrC,QAAQ,EAAE,CAAC,KAAa,EAAE,EAAE;QAC1B,IAAI,oBAAoB,CAAC,IAAI,CAAC,KAAK,CAAC;YAClC,OAAO,IAAI,CAAC;QAEd,OAAO,wEAAwE,CAAC;IAClF,CAAC;CACF,CAAC;AAEF,MAAM,SAAS,GAAG,qGAAqG,CAAC;AAE3G,QAAA,cAAc,GAAG,WAAW,CAAC;AAE7B,QAAA,mBAAmB,GAAG;IACjC,IAAI,EAAE,sBAAc;IACpB,IAAI,EAAE,OAAO;IACb,OAAO,EAAE,aAAa;IACtB,IAAI,EAAE,GAAG,EAAE,CAAC,CAAC,YAAI,EAAE,CAAC,sBAAc,CAAC;IACnC,QAAQ,EAAE,CAAC,KAAa,EAAE,EAAE;QAC1B,IAAI,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC;YACvB,OAAO,IAAI,CAAC;QAEd,OAAO,yBAAyB,CAAC;IACnC,CAAC;CACF,CAAC","sourcesContent":["import { argv } from \"../../utils/utils\";\n\nexport const ARG_AUTHOR_NAME = \"authorName\";\n\nexport const AUTHOR_NAME_QUESTION = {\n  name: ARG_AUTHOR_NAME,\n  type: \"input\",\n  message: \"Author name:\",\n  when: () => !argv()[ARG_AUTHOR_NAME],\n  validate: (input: string) => {\n    if (/^([A-Za-z\\-_\\d])+$/.test(input))\n      return true;\n\n    return \"Author name may only include letters, numbers, underscores and hashes.\";\n  },\n};\n\n// eslint-disable-next-line no-control-regex\nconst emailRegex = /(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])/;\n\nexport const ARG_AUTHOR_EMAIL = \"authorEmail\";\n\nexport const AUTHOR_EMAIL_QUESTION = {\n  name: ARG_AUTHOR_EMAIL,\n  type: \"input\",\n  message: \"Author Email:\",\n  when: () => !argv()[ARG_AUTHOR_EMAIL],\n  validate: (input: string) => {\n    if (emailRegex.test(input))\n      return true;\n\n    return \"Author name may only include letters, numbers, underscores and hashes.\";\n  },\n};\n\nexport const ARG_AUTHOR_GITHUB = \"authorGithub\";\n\nexport const AUTHOR_GITHUB_QUESTION = {\n  name: ARG_AUTHOR_GITHUB,\n  type: \"input\",\n  message: \"Author Github:\",\n  when: () => !argv().authorGithub,\n  validate: (input: string) => {\n    if (/^([A-Za-z\\-_\\d])+$/.test(input))\n      return true;\n\n    return \"Author name may only include letters, numbers, underscores and hashes.\";\n  },\n};\n\nexport const ARG_AUTHOR_NPMJS = \"authorNpmjs\";\n\nexport const AUTHOR_NPMJS_QUESTION = {\n  name: ARG_AUTHOR_NPMJS,\n  type: \"input\",\n  message: \"Author NPMjs:\",\n  when: () => !argv()[ARG_AUTHOR_NPMJS],\n  validate: (input: string) => {\n    if (/^([A-Za-z\\-_\\d])+$/.test(input))\n      return true;\n\n    return \"Author name may only include letters, numbers, underscores and hashes.\";\n  },\n};\n\nconst URL_REGEX = /https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_+.~#?&//=]*)/;\n\nexport const ARG_AUTHOR_URL = \"authorUrl\";\n\nexport const AUTHOR_URL_QUESTION = {\n  name: ARG_AUTHOR_URL,\n  type: \"input\",\n  message: \"Author URL:\",\n  when: () => !argv()[ARG_AUTHOR_URL],\n  validate: (input: string) => {\n    if (URL_REGEX.test(input))\n      return true;\n\n    return \"That's not a valid URL.\";\n  },\n};\n"]}