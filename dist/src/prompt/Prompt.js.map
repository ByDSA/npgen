{"version":3,"file":"Prompt.js","sourceRoot":"","sources":["../../../src/prompt/Prompt.ts"],"names":[],"mappings":";;;;AAAA,oDAAoB;AACpB,wDAAwB;AAExB,2FAA0D;AAC1D,2EAA2C;AAC3C,yEAAyC;AAEzC,0CAA+C;AAE/C,wFAAwD;AACxD,gHAAuE;AACvE,8EAAkE;AAElE,SAAgB,aAAa,CAAC,IAAY;IACxC,OAAO,YAAI,EAAE,CAAC,GAAG,IAAI,cAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,IAAI,CAAC,CAAC;AACtD,CAAC;AAFD,sCAEC;AAED,SAAe,eAAe;;QAC5B,MAAM,UAAU,iDACX,MAAM,gCAAa,EAAE,GACrB,MAAM,gCAAU,EAAE,GAClB,MAAM,sBAAY,EAAE,CACxB,CAAC;QACF,MAAM,IAAI,GAAS,gCACd,YAAI,EAAE,GACN,UAAU,CACd,CAAC;QAEF,OAAO,IAAI,CAAC;IACd,CAAC;CAAA;AAED,SAAS,kBAAkB,CAAC,IAAU;IACpC,MAAM,YAAY,GAAG,cAAI,CAAC,IAAI,CAAC,eAAO,EAAE,EAAE,WAAW,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;IACtE,MAAM,UAAU,GAAG,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC5C,MAAM,cAAc,GAAG,iBAAiB,CAAC,YAAY,CAAC,CAAC;IAEvD,IAAI,CAAC,cAAc,CAAC,WAAW;QAC7B,cAAc,CAAC,WAAW,GAAG,EAAE,CAAC;IAElC,cAAc,CAAC,WAAW,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;IAElD,MAAM,OAAO,GAAe;QAC1B,YAAY;QACZ,UAAU;QACV,MAAM,EAAE,cAAc;QACtB,IAAI;KACL,CAAC;IAEF,OAAO,OAAO,CAAC;AACjB,CAAC;AAED,SAAsB,UAAU;;QAC9B,MAAM,IAAI,GAAG,MAAM,eAAe,EAAE,CAAC;QACrC,MAAM,OAAO,GAAG,kBAAkB,CAAC,IAAI,CAAC,CAAC;QAEzC,8BAAmB,CAAC,OAAO,CAAC,CAAC;QAE7B,IAAI,CAAC,CAAA,MAAM,qBAAW,CAAC,OAAO,CAAC,CAAA;YAC7B,OAAO;QAET,sBAAY,CAAC,OAAO,CAAC,CAAC;IACxB,CAAC;CAAA;AAVD,gCAUC;AAED,SAAS,iBAAiB,CAAC,YAAoB;IAC7C,MAAM,UAAU,GAAG,cAAI,CAAC,IAAI,CAAC,YAAY,EAAE,gBAAgB,CAAC,CAAC;IAE7D,IAAI,CAAC,YAAE,CAAC,UAAU,CAAC,UAAU,CAAC,EAAE;QAC9B,OAAO,EACN,CAAC;KACH;IAED,MAAM,qBAAqB,GAAG,YAAE,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC;IAE1D,IAAI,qBAAqB;QACvB,OAAO,IAAI,CAAC,KAAK,CAAC,qBAAqB,CAAC,QAAQ,EAAE,CAAC,CAAC;IAEtD,OAAO,EACN,CAAC;AACJ,CAAC","sourcesContent":["import fs from \"fs\";\nimport path from \"path\";\nimport CliOptions from \"../CliOptions\";\nimport copyTemplateContent from \"../CopyTemplateContents\";\nimport finalMessage from \"../FinalMessage\";\nimport postProcess from \"../PostProcess\";\nimport TemplateConfig from \"../TemplateConfig\";\nimport { argv, baseDir } from \"../utils/utils\";\nimport { Args } from \"./Args\";\nimport authorPrompt from \"./author-prompt/AuthorPrompt\";\nimport projectPrompt from \"./project-questions/ProjectQuestionsPrompt\";\nimport { repoPrompt } from \"./repo-questions/RepoQuestionsPrompt\";\n\nexport function getTargetPath(name: string) {\n  return argv().out || path.join(process.cwd(), name);\n}\n\nasync function retrieveAllArgs() {\n  const promptArgs: Args = {\n    ...await projectPrompt(),\n    ...await repoPrompt(),\n    ...await authorPrompt(),\n  };\n  const args: Args = <any> {\n    ...argv(),\n    ...promptArgs,\n  };\n\n  return args;\n}\n\nfunction generateCliOptions(args: Args): CliOptions {\n  const templatePath = path.join(baseDir(), \"templates\", args.template);\n  const targetPath = getTargetPath(args.name);\n  const templateConfig = getTemplateConfig(templatePath);\n\n  if (!templateConfig.ignoreFiles)\n    templateConfig.ignoreFiles = [];\n\n  templateConfig.ignoreFiles.push(\".template.json\");\n\n  const options: CliOptions = {\n    templatePath,\n    targetPath,\n    config: templateConfig,\n    args,\n  };\n\n  return options;\n}\n\nexport async function showPrompt() {\n  const args = await retrieveAllArgs();\n  const options = generateCliOptions(args);\n\n  copyTemplateContent(options);\n\n  if (!await postProcess(options))\n    return;\n\n  finalMessage(options);\n}\n\nfunction getTemplateConfig(templatePath: string): TemplateConfig {\n  const configPath = path.join(templatePath, \".template.json\");\n\n  if (!fs.existsSync(configPath)) {\n    return {\n    };\n  }\n\n  const templateConfigContent = fs.readFileSync(configPath);\n\n  if (templateConfigContent)\n    return JSON.parse(templateConfigContent.toString());\n\n  return {\n  };\n}\n"]}