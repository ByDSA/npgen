{"version":3,"file":"PostProcess.js","sourceRoot":"","sources":["../../src/PostProcess.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable no-console */\nimport chalk from \"chalk\";\nimport fs from \"fs\";\nimport * as shell from \"shelljs\";\nimport simpleGit, { SimpleGitOptions } from \"simple-git\";\nimport CliOptions from \"./CliOptions\";\nimport { createRepo, CreateRepoParams } from \"./github/GitHub\";\n\nfunction getGit() {\n  const ooo: Partial<SimpleGitOptions> = {\n    baseDir: process.cwd(),\n    binary: \"git\",\n    maxConcurrentProcesses: 6,\n  };\n  const git = simpleGit(ooo);\n\n  return git;\n}\n\nexport default async function postProcess(options: CliOptions) {\n  try {\n    return await postProcessNode(options);\n  } catch (e) {\n    console.log(chalk.red(e));\n\n    return false;\n  }\n}\n\nfunction title(str: string) {\n  console.log(chalk.yellow(str));\n}\n\nasync function initializeGitproject() {\n  title(\"Initializing git project...\");\n\n  needs(\"git\");\n  await getGit().init();\n\n  if (!fs.existsSync(\".git\"))\n    throw new Error(\"Failed on initialize Git Project\");\n}\n\nasync function postProcessNode(options: CliOptions) {\n  shell.cd(options.targetPath);\n\n  await initializeGitproject();\n\n  await installDependencies();\n\n  const opts = {\n    name: options.args.name,\n    description: options.args.description,\n    private: options.args.repoPrivate,\n  };\n\n  if (options.args.repoDo) {\n    title(\"Creating Github repo...\");\n    await createGitRepo(opts);\n  }\n\n  return true;\n}\n\nfunction generateReadme() {\n  title(\"Generating README.md...\");\n  exec(\"npm run readme\");\n}\n\nasync function firstCommit(url: string) {\n  await generateReadme();\n  await getGit().add(\".\");\n  await commit(\"chore: first commit\");\n  await getGit().branch( {\n    M: \"main\",\n  } );\n  await getGit().addRemote(\"origin\", url);\n}\n\nasync function commit(msg: string) {\n  await getGit().commit(msg);\n}\n\nasync function createGitRepo(options: CreateRepoParams) {\n  const res = await createRepo(options);\n  const url = res.data.clone_url;\n\n  title(\"Doing first commit and pushing...\");\n  await firstCommit(url);\n  await getGit().push(\"origin\", \"main\");\n}\n\nfunction installDependencies() {\n  title(\"Installing npm dependencies...\");\n  needs(\"npm\");\n  exec(\"npm i\");\n}\n\nfunction needs(file: string) {\n  if (!shell.which(file))\n    throw new Error(`No ${file} found`);\n}\n\nfunction exec(cmd: string) {\n  const result = shell.exec(cmd);\n\n  if (result.code !== 0)\n    throw new Error(`Error executing ${cmd}`);\n}\n"]}